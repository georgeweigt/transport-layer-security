void aes128_init(struct ssl_session *p, uint8_t *encrypt_key, uint8_t *decrypt_key, uint8_t *encrypt_iv, uint8_t *decrypt_iv);
void aes128_encrypt(struct ssl_session *p, unsigned char *buf, int num_blocks);
void aes128_decrypt(struct ssl_session *p, unsigned char *buf, int num_blocks);
int mul(int a, int b);
void aes_init();
void key_expansion(uint8_t *key, uint32_t *w, uint32_t *v);
void encrypt_nib(uint32_t *w, uint8_t *in, uint8_t *out);
void decrypt_nib(uint32_t *v, uint8_t *in, uint8_t *out);
int read_cert_files();
int read_certificate_file(char *filename);
int read_key_file(char *filename, char *passphrase, struct keyinfo *ki);
int decode(int c);
int get_rsa_keys_from_keyinfo(struct keyinfo *ki);
int parse_certificate(struct certinfo *p);
int parse_cert_level_1(struct certinfo *p, unsigned char *cert, int end);
int parse_cert_level_2(struct certinfo *p, unsigned char *cert, int offset, int end);
int parse_cert_level_3(struct certinfo *p, unsigned char *cert, int offset, int end);
int parse_public_key(struct certinfo *p, unsigned char *cert, int offset, int end);
int parse_rsa_info(struct certinfo *p, unsigned char *cert, int offset, int end);
int parse_signature_algorithm(struct certinfo *p, unsigned char *cert, int offset, int end);
int parse_signature(struct certinfo *p, unsigned char *cert, int offset, int end);
int parse_ecdsa_signature(struct certinfo *p, unsigned char *cert, int offset, int end);
int parse_validity(struct certinfo *p, unsigned char *cert, int offset, int end);
time_t convert_utc_time(unsigned char *s, int len);
time_t convert_generalized_time(unsigned char *s, int len);
int get_type_and_length(unsigned char *cert, int end, int *offset, int *type, int *length);
int ssl_match_server_name(struct certinfo *p, unsigned char *server_name, int server_name_length);
int ssl_match_subject_alt_name(struct certinfo *p, unsigned char *server_name, int server_name_length);
int ssl_match_common_name(struct certinfo *p, unsigned char *server_name, int server_name_length);
int ssl_compare_names(unsigned char *pattern, int pattern_length, unsigned char *server_name, int server_name_length);
int checkchain(struct ssl_session *p, unsigned char *buf, int len);
int isselfsigned(struct certinfo *p);
void copy_certificate_key(struct ssl_session *p, struct certinfo *ci);
int check_signing_algorithm(struct ssl_session *p, struct certinfo *ci);
unsigned char * cert_malloc(int n);
void cert_free(unsigned char *p);
int istrusted(struct certinfo *p);
int issignedby(struct certinfo *p, struct certinfo *q);
unsigned char * encrypt_signature(struct certinfo *p, struct certinfo *q);
int check_md5_signature(struct certinfo *p, unsigned char *z);
int check_sha1_signature(struct certinfo *p, unsigned char *z);
int check_sha224_signature(struct certinfo *p, unsigned char *z);
int check_sha256_signature(struct certinfo *p, unsigned char *z);
int check_sha384_signature(struct certinfo *p, unsigned char *z);
int check_sha512_signature(struct certinfo *p, unsigned char *z);
int check_ecdsa_signature(struct certinfo *p, struct certinfo *q, unsigned char *hash, int hashlen);
void ecdhe256_generate(struct ssl_session *p, unsigned char *x, unsigned char *y);
void ecdhe384_generate(struct ssl_session *p, unsigned char *x, unsigned char *y);
int ecdsa256_verify(struct certinfo *p, struct certinfo *q, unsigned char *hash, int hashlen);
int ecdhe256_verify_hash(unsigned char *hash, int hashlen, unsigned char *rr, int r_length, unsigned char *ss, int s_length, unsigned char *xx, unsigned char *yy);
int ecdsa256_verify_f(unsigned *h, unsigned *r, unsigned *s, unsigned *x, unsigned *y);
void ecdsa256_sign_f(unsigned *h, unsigned *d, unsigned char *sig);
int ecdsa384_verify(struct certinfo *p, struct certinfo *q, unsigned char *hash, int hashlen);
int ecdhe384_verify_hash(unsigned char *hash, int hashlen, unsigned char *rr, int r_length, unsigned char *ss, int s_length, unsigned char *xx, unsigned char *yy);
int ecdsa384_verify_f(unsigned *h, unsigned *r, unsigned *s, unsigned *x, unsigned *y);
void ecdsa384_sign_f(unsigned *h, unsigned *d, unsigned char *sig);
void ec_init(void);
unsigned int * ec_modinv(unsigned int *c, unsigned int *p);
void ec_projectify(struct point *S);
int ec_affinify(struct point *S, unsigned *p);
void ec_double(struct point *R, struct point *S, unsigned *p);
void ec_add_xyz(struct point *R, struct point *S, struct point *T, unsigned *p);
void ec_full_add(struct point *R, struct point *S, struct point *T, unsigned *p);
void ec_full_sub(struct point *R, struct point *S, struct point *T, unsigned *p);
void ec_mult(struct point *R, unsigned *d, struct point *S, unsigned *p);
int ec_get_msbit_index(unsigned *u);
int ec_get_bit(unsigned *u, int k);
int ec_F(int t);
void ec_twin_mult(struct point *R, unsigned *d0, struct point *S, unsigned *d1, struct point *T, unsigned *p);
void ec_free_xyz(struct point *u);
unsigned * ec_add(unsigned *u, unsigned *v);
unsigned * ec_sub(unsigned *u, unsigned *v);
unsigned * ec_mul(unsigned *u, unsigned *v);
unsigned * ec_div(unsigned *u, unsigned *v);
void ec_mod(unsigned *u, unsigned *v);
unsigned * ec_pow(unsigned *u, unsigned *v);
void ec_shr(unsigned *u);
int ec_cmp(unsigned *u, unsigned *v);
int ec_equal(unsigned *u, unsigned v);
unsigned * ec_int(int k);
unsigned * ec_new(int n);
void ec_free(unsigned *p);
unsigned * ec_dup(unsigned *u);
void ec_norm(unsigned *u);
unsigned * ec_hexstr_to_bignum(char *s);
unsigned * ec_buf_to_bignum(unsigned char *buf, int len);
void ec_test(void);
void ec_test_full_add(void);
void ec_test_full_sub(void);
void ec_test_double(void);
void ec_test_mult(void);
void ec_test_twin_mult(void);
void ec_test256(void);
void ec_test384(void);
void ecdh_test(void);
int main(int argc, char **argv);
void send_http_get(struct ssl_session *p);
void send_http_response(struct ssl_session *p);
void main_send(struct ssl_session *p, char *msg);
void main_recv(uint8_t *buf, int len);
int open_tcp_socket(char *hostname, int portnumber);
void server(void);
void open_listen_interface(void);
void wait_for_connect(void);
void server_ssl(void);
void hmac_md5(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void md5(uint8_t *buf, int len, uint8_t *out);
void md5_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void md5_hash_block(uint8_t *buf, uint32_t *hash);
void rc4_init(struct ssl_session *p, unsigned char *encrypt_key, unsigned char *decrypt_key);
void rc4_encrypt(struct ssl_session *p, unsigned char *buf, int n);
void rc4_decrypt(struct ssl_session *p, unsigned char *buf, int n);
void rc4(struct rc4 *p, unsigned char *buf, int n);
void rsa_encrypt(struct ssl_session *p, uint8_t *buf, int len);
void rsa_encrypt_signature(struct certinfo *p, struct certinfo *q);
void rsa_decrypt(uint8_t *buf, int len, struct keyinfo *ki);
uint32_t * step_up(uint32_t *m, uint32_t *p, uint32_t *q);
uint32_t * modpow(uint32_t *a, uint32_t *b, uint32_t *c);
void mshr(uint32_t *u);
uint32_t * madd(uint32_t *u, uint32_t *v);
uint32_t * msub(uint32_t *u, uint32_t *v);
uint32_t * mmul(uint32_t *u, uint32_t *v);
uint32_t * mdiv(uint32_t *u, uint32_t *v);
void mmod(uint32_t *u, uint32_t *v);
int mcmp(uint32_t *u, uint32_t *v);
uint32_t * mint(int k);
uint32_t * mnew(int n);
void mfree(uint32_t *p);
uint32_t * mcopy(uint32_t *u);
void mnorm(uint32_t *u);
uint32_t * buf_to_int(uint8_t *buf, int len);
uint32_t * str_to_int(char *s);
void print_rsa_keys(struct keyinfo *ki);
void selftest(void);
void stop(char *s);
void test_md5(void);
void test_sha1(void);
void test_sha224(void);
void test_sha256(void);
void test_sha384(void);
void test_sha512(void);
void hmac_sha1(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha1(uint8_t *buf, int len, uint8_t *out);
void sha1_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha1_hash_block(uint8_t *buf, uint32_t *hash);
void hmac_sha224(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha224(uint8_t *buf, int len, uint8_t *out);
void sha224_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha224_hash_block(uint8_t *buf, uint32_t *hash);
void hmac_sha256(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha256(uint8_t *buf, int len, uint8_t *out);
void sha256_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha256_hash_block(uint8_t *buf, uint32_t *hash);
void hmac_sha384(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha384(uint8_t *buf, int len, uint8_t *out);
void sha384_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha384_hash_block(uint8_t *buf, uint64_t *hash);
void hmac_sha512(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha512(uint8_t *buf, int len, uint8_t *out);
void sha512_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha512_hash_block(uint8_t *buf, uint64_t *hash);
void ssl_disconnect(struct ssl_session *p, char *reason, int line);
void ssl_close(struct ssl_session *p);
void ssl_start_client_session(struct ssl_session *p, char *hostname);
void ssl_start_server_session(struct ssl_session *p);
void receive_application_data(struct ssl_session *p);
void receive_handshake_message(struct ssl_session *p);
void send_client_hello(struct ssl_session *p);
void receive_client_hello(struct ssl_session *p);
int ssl_parse_extension_list(struct ssl_session *p, uint8_t *buf, int len);
int ssl_parse_server_name(struct ssl_session *p, uint8_t *buf, int len);
void send_server_hello(struct ssl_session *p);
void receive_server_hello(struct ssl_session *p);
void send_server_certificate(struct ssl_session *p);
void receive_server_certificate(struct ssl_session *p);
void send_server_hello_done(struct ssl_session *p);
void receive_server_key_exchange(struct ssl_session *p);
int parse_server_key_message(struct ssl_session *p, struct ephemeral_key *key);
int ssl_get_x509_length(uint8_t *buf, int *offset, int end);
int check_ephemeral_key_signature(struct ssl_session *p, struct ephemeral_key *key);
void receive_server_hello_done(struct ssl_session *p);
void send_client_key_exchange(struct ssl_session *p);
void receive_client_key_exchange(struct ssl_session *p);
void send_change_cipher_spec(struct ssl_session *p);
void receive_change_cipher_spec(struct ssl_session *p);
void send_finished(struct ssl_session *p);
void receive_client_finished(struct ssl_session *p);
void receive_server_finished(struct ssl_session *p);
void send_alert_0_close_notify(struct ssl_session *p);
void send_alert_10_unexpected_message(struct ssl_session *p);
void send_alert_20_bad_record_mac(struct ssl_session *p);
void send_alert_22_record_overflow(struct ssl_session *p);
void send_alert_40_handshake_failure(struct ssl_session *p);
void send_alert_42_bad_certificate(struct ssl_session *p);
void send_alert_43_unsupported_certificate(struct ssl_session *p);
void send_alert_47_illegal_parameter(struct ssl_session *p);
void send_alert_50_decode_error(struct ssl_session *p);
void send_alert_51_decrypt_error(struct ssl_session *p);
void send_alert_70_protocol_version(struct ssl_session *p);
void compute_master_secret(struct ssl_session *p);
void compute_master_secret_v10(struct ssl_session *p);
void compute_master_secret_v12(struct ssl_session *p);
void compute_keys(struct ssl_session *p);
void compute_keys_v10(struct ssl_session *p, uint8_t *kmat);
void compute_keys_v12(struct ssl_session *p, uint8_t *kmat);
void compute_handshake_hash(struct ssl_session *p, int server);
void compute_handshake_hash_v10(struct ssl_session *p, int server);
void compute_handshake_hash_v12(struct ssl_session *p, int server);
void start_handshake_hash(struct ssl_session *p, uint8_t *buf, int len);
void start_handshake_hash_v10(struct ssl_session *p, uint8_t *buf, int len);
void start_handshake_hash_v12(struct ssl_session *p, uint8_t *buf, int len);
void update_handshake_hash(struct ssl_session *p, uint8_t *buf, int len);
void update_handshake_hash_v10(struct ssl_session *p, uint8_t *buf, int len);
void update_handshake_hash_v12(struct ssl_session *p, uint8_t *buf, int len);
void finish_handshake_hash_v10(struct ssl_session *p, uint8_t *buf);
void finish_handshake_hash_v12(struct ssl_session *p, uint8_t *out);
void print_buf(char *s, uint8_t *buf, int len);
int ssl_client_key_out(struct ssl_session *p, uint8_t *out);
void rsa_generate(struct ssl_session *p, uint8_t *out);
void ssl_free_keys(struct ssl_session *p);
uint8_t * ssl_malloc(int len);
void ssl_free(uint8_t *p);
int ssl_hmac_prep(struct ssl_session *p, int hmac_length);
char * alert_level_str(int alert_level);
char * alert_descr_str(int alert_descr);
void ssl_decrypt(struct ssl_session *p);
void ssl_encrypt_and_send(struct ssl_session *p, int type, uint8_t *buf, int len);
void ssl_recv(struct ssl_session *p);
void ssl_recv_alert(struct ssl_session *p);
void ssl_recv_handshake_frag(struct ssl_session *p);
void ssl_recv_record(struct ssl_session *p, uint8_t *record_buf, int record_len);
void ssl_send(struct ssl_session *p);
void ssl_send_alert(struct ssl_session *p, int level, int descr);
void ssl_send_record(struct ssl_session *p, int type, uint8_t *buf, int len);
